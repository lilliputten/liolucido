// vim: fdm=indent

// See for `DATABASE_URL` parameter in the environment for the sqlite file location (under the `prisma` folder).

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../src/generated/prisma"
}

// provider = "sqlite" | "postgresql", see 'prisma-switch.mjs'
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// System scope

model Account {
  id String @id @default(cuid())

  type          String
  refresh_token String?
  access_token  String?
  expires_at    Int?
  token_type    String?
  scope         String?
  id_token      String?
  session_state String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  provider          String
  providerAccountId String @map("provider_account_id")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  expires      DateTime

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @map("updated_at")
  role          String    @default("USER") // "USER" OR "ADMIN", instead of `UserRole` enum (unsupported in sqlite): `role UserRole  @default(USER)`
  accounts      Account[]
  sessions      Session[]

  topics Topic[] // Owned topics

  // UserQuestion     UserQuestion[]
  // UserTopic        UserTopic[]
  UserTopicWorkout UserTopicWorkout[]
  userSettings     UserSettings?

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Telegram user session
model TelegramSession {
  // id    Int    @id @default(autoincrement())
  key   String @id @unique
  value String // Session data in json string

  @@map("telegram_session")
}

// User settings

model UserSettings {
  userId String @id @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  showOnlyMyTopics Boolean? @default(false) @map("show_only_my_topics")

  // The application language.
  locale String? @map("locale") // Language code ("en", "ru", ee the defintion in `src/i18n/types.ts`

  // The application theme: the color and the dark/light/system switch
  theme      String? @map("theme")
  themeColor String? @map("theme_color")

  // An optional language code and name to find topics
  langCode   String?  @map("lang_code") // Language code (eg, "en", "ru", etc, or custom)
  langName   String?  @map("lang_name") // Language name
  langCustom Boolean? @map("lang_custom") // Is the language a custom one?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@index([userId])
  @@map("user_settings")
}

// Applied data scopes

model Topic {
  // Unique id
  // id Int @id @default(autoincrement())
  id String @id @default(cuid())

  // A topic name. It's good if it's a unique value.
  name String

  // A topic description. Can be used in questions/answers generation. Is a markdown text.
  description String?

  // If the topic is public it's available for all the users, not only for you.
  isPublic Boolean? @map("is_public")

  // An optional list of keywords separated by commas.
  keywords String?

  // An optional language code and name for the topic.
  langCode   String?  @map("lang_code") // Language code (eg, "en", "ru", etc, or custom)
  langName   String?  @map("lang_name") // Language name
  langCustom Boolean? @map("lang_custom") // Is the language a custom one?

  // Allow to generate random number of answers for questions (if it's not overidden in the question settings).
  answersCountRandom Boolean? @map("answers_count_random")
  answersCountMin    Int?     @map("answers_count_min")
  answersCountMax    Int?     @map("answers_count_max")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  questions Question[] // Questions in this topic

  // UserTopic        UserTopic[]
  UserTopicWorkout UserTopicWorkout[]

  @@index([userId])
  @@map("topics")
}

model Question {
  // Unique id
  // id Int @id @default(autoincrement())
  id String @id @default(cuid())

  // Custom markdown text
  text String

  answersCountRandom Boolean? @map("answers_count_random")
  answersCountMin    Int?     @map("answers_count_min")
  answersCountMax    Int?     @map("answers_count_max")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  topicId String @map("topic_id")
  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)

  answers Answer[] // Answers for this question

  // UserQuestion UserQuestion[]

  @@index([topicId])
  @@map("questions")
}

model Answer {
  // Unique id
  // id Int @id @default(autoincrement())
  id String @id @default(cuid())

  isCorrect   Boolean @default(false) @map("is_correct")
  isGenerated Boolean @default(false) @map("is_generated")

  // Custom markdown text
  text String

  // answersCountRandom Boolean? @map("answers_count_random")
  // answersCountMin    Int?     @map("answers_count_min")
  // answersCountMax    Int?     @map("answers_count_max")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  questionId String   @map("question_id")
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
  @@map("answers")
}

// Relations

model UserTopicWorkout {
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  topicId String @map("topic_id")
  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)

  // favorite Boolean? // TODO: Allow adding dd to the favorites list

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  startedAt  DateTime? @map("started_at")
  finishedAt DateTime? @map("finished_at")

  questionsCount   Int?    @map("questions_count") // Questions count
  questionsOrder   String? @map("questions_order") // Question IDs, separated by space
  questionResults  String? @map("question_results") // Answer results (correct=1, incorrect=0), packed as a JSON array (`[A,B,...]`), in the order corresponding to `questionsOrder`
  stepIndex        Int?    @map("step_index") // Current question
  selectedAnswerId String? @map("selected_answer_id") // Answer for the current question. If defined then consider that user already chosen the answer but hasn't went to the next question (show the choice and suggest to go further)

  currentRatio   Int? @map("current_ratio") // Current ratio (if finished), percent (if finished)
  currentTime    Int? @map("current_time") // Current time remained to finish, in seconds (if finished)
  correctAnswers Int? @map("correct_answers") // Current correct answers count (if finished)

  totalRounds  Int    @default(0) @map("total_rounds") // Total rounds for this workout
  allRatios    String @default("") @map("all_ratios") // All score ratios through all rounds, json packed list of ints (percent)
  allTimes     String @default("") @map("all_times") // All score times through all rounds, in seconds, json packed list of ints (seconds)
  averageRatio Int    @default(0) @map("average_ratio") // Average score ratio through all rounds, percent
  averageTime  Int    @default(0) @map("average_time") // Average score time through all rounds, in seconds

  started  Boolean @default(false)
  finished Boolean @default(false)

  @@id([userId, topicId])
  @@map("user_topic_workouts")
}

// // UNUSED: See `userAndTopicRelation.test.ts.UNUSED`
// model UserTopic {
//   userId String @map("user_id")
//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
//
//   topicId String @map("topic_id")
//   topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)
//
//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @default(now()) @map("updated_at")
//
//   favorite Boolean @default(false)
//   passed   Boolean @default(false)
//
//   @@id([userId, topicId])
//   @@map("user_topics")
// }
//
// // UNUSED
// model UserQuestion {
//   userId String @map("user_id")
//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
//
//   questionId String   @map("question_id")
//   question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
//
//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @default(now()) @map("updated_at")
//
//   answered Boolean @default(false)
//   repeat   Boolean @default(false)
//
//   @@id([userId, questionId])
//   @@map("user_questions")
// }
