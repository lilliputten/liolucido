generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  type              String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at")
  provider          String
  providerAccountId String   @map("provider_account_id")
  userId            String   @map("user_id")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  expires      DateTime
  userId       String   @map("user_id")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

enum UserRole {
  USER
  ADMIN
}

enum UserGrade {
  GUEST
  BASIC
  PRO
  PREMIUM
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?

  role  UserRole  @default(USER)
  grade UserGrade @default(GUEST)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  accounts         Account[]
  sessions         Session[]
  topics           Topic[]
  userSettings     UserSettings?
  userTopicWorkout UserTopicWorkout[]
  workoutStats     WorkoutStats[]
  AIGenerations    AIGeneration[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  // Temp parameters passing to user creation
  name   String?
  locale String?
  image  String?

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model TelegramSession {
  key   String @id @unique
  value String

  @@map("telegram_session")
}

enum AllowedUserType {
  EMAIL
  TELEGRAM
}

model AllowedUser {
  id Int @id @default(autoincrement())

  // Telegram or email.
  // type  String @default("EMAIL")
  type  AllowedUserType @default(EMAIL)
  value String          @default("")

  @@unique([type, value])
  @@map("allowed_users")
}

model UserSettings {
  userId            String   @id @map("user_id")
  showOnlyMyTopics  Boolean? @default(false) @map("show_only_my_topics")
  locale            String?  @map("locale")
  theme             String?  @map("theme")
  themeColor        String?  @map("theme_color")
  langCode          String?  @map("lang_code")
  langName          String?  @map("lang_name")
  langCustom        Boolean? @map("lang_custom")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at")
  jumpToNewEntities Boolean? @default(false) @map("jump_to_new_entities")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("user_settings")
}

model AIGeneration {
  id String @id @default(cuid())

  modelUsed String? @map("model_used")

  spentTimeMs Int @default(0) @map("spent_time_ms")
  spentTokens Int @default(0) @map("spent_tokens")

  topicId String? @map("topic_id")

  createdAt  DateTime @default(now()) @map("created_at")
  finishedAt DateTime @default(now()) @map("finished_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  userId String @map("user_id")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("ai_generations")
}

model Topic {
  id                 String             @id @default(cuid())
  name               String
  description        String?
  isPublic           Boolean?           @map("is_public")
  keywords           String?
  langCode           String?            @map("lang_code")
  langName           String?            @map("lang_name")
  langCustom         Boolean?           @map("lang_custom")
  answersCountRandom Boolean?           @map("answers_count_random")
  answersCountMin    Int?               @map("answers_count_min")
  answersCountMax    Int?               @map("answers_count_max")
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @default(now()) @updatedAt @map("updated_at")
  userId             String             @map("user_id")
  questions          Question[]
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userTopicWorkout   UserTopicWorkout[]
  workoutStats       WorkoutStats[]

  @@index([userId])
  @@map("topics")
}

model Question {
  id                 String   @id @default(cuid())
  text               String
  answersCountRandom Boolean? @map("answers_count_random")
  answersCountMin    Int?     @map("answers_count_min")
  answersCountMax    Int?     @map("answers_count_max")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @default(now()) @updatedAt @map("updated_at")
  topicId            String   @map("topic_id")
  isGenerated        Boolean  @default(false) @map("is_generated")
  answers            Answer[]
  topic              Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@index([topicId])
  @@map("questions")
}

model Answer {
  id          String   @id @default(cuid())
  isCorrect   Boolean  @default(false) @map("is_correct")
  isGenerated Boolean  @default(false) @map("is_generated")
  text        String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  questionId  String   @map("question_id")
  explanation String?
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
  @@map("answers")
}

model UserTopicWorkout {
  userId           String         @map("user_id")
  topicId          String         @map("topic_id")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @default(now()) @updatedAt @map("updated_at")
  startedAt        DateTime?      @map("started_at")
  finishedAt       DateTime?      @map("finished_at")
  questionsCount   Int?           @map("questions_count")
  questionsOrder   String?        @map("questions_order")
  questionResults  String?        @map("question_results")
  stepIndex        Int?           @map("step_index")
  selectedAnswerId String?        @map("selected_answer_id")
  currentRatio     Int?           @map("current_ratio")
  currentTime      Int?           @map("current_time")
  correctAnswers   Int?           @map("correct_answers")
  started          Boolean        @default(false)
  finished         Boolean        @default(false)
  topic            Topic          @relation(fields: [topicId], references: [id], onDelete: Cascade)
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutStats     WorkoutStats[]

  @@id([userId, topicId])
  @@map("user_topic_workouts")
}

model WorkoutStats {
  id      String @id @default(cuid())
  userId  String @map("user_id")
  topicId String @map("topic_id")

  // Round statistics
  // roundNumber    Int @map("round_number")
  totalQuestions Int @map("total_questions")
  correctAnswers Int @map("correct_answers")
  ratio          Int
  timeSeconds    Int @map("time_seconds")

  // Timestamps
  startedAt  DateTime @map("started_at")
  finishedAt DateTime @map("finished_at")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  topic   Topic            @relation(fields: [topicId], references: [id], onDelete: Cascade)
  user    User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  workout UserTopicWorkout @relation(fields: [userId, topicId], references: [userId, topicId], onDelete: Cascade)

  @@index([userId])
  @@index([topicId])
  @@index([userId, topicId])
  @@map("workout_stats")
}
