// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// See for `DATABASE_URL` parameter in the environment for the sqlite file location (under the `prisma` folder).

generator client {
  provider = "prisma-client-js"
}

// provider = "sqlite" | "postgresql", see 'prisma-switch.mjs'
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// System scope

model Account {
  id String @id @default(cuid())

  type          String
  refresh_token String?
  access_token  String?
  expires_at    Int?
  token_type    String?
  scope         String?
  id_token      String?
  session_state String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  provider          String
  providerAccountId String @map("provider_account_id")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  expires      DateTime

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @map("updated_at")
  role          String    @default("USER") // "USER" OR "ADMIN", instead of `UserRole` enum (unsupported in sqlite): `role UserRole  @default(USER)`
  accounts      Account[]
  sessions      Session[]

  topics Topic[] // Owned topics

  UserTopic    UserTopic[]
  UserQuestion UserQuestion[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Telegram user session
model TelegramSession {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String // Session data in json string

  @@map("telegram_session")
}

// Applied data scopes

model Topic {
  // Unique id
  id Int @id @default(autoincrement())

  name     String

  isCorrect   Boolean? @map("is_correct")
  isGenerated Boolean? @map("is_generated")

  keywords String?
  language String?

  topicsCountRandom Boolean? @map("topics_count_random")
  topicsCountMin    Int?     @map("topics_count_min")
  topicsCountMax    Int?     @map("topics_count_max")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  questions Question[] // Questions in this topic

  UserTopic UserTopic[]

  @@index([userId])
  @@map("topics")
}

model Question {
  // Unique id
  id Int @id @default(autoincrement())

  // Custom text
  text String

  answersCountRandom Boolean?
  answersCountMin    Int?
  answersCountMax    Int?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  topicId Int   @map("topic_id")
  topic   Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)

  answers Answer[] // Answers for this question

  UserQuestion UserQuestion[]

  @@index([topicId])
  @@map("questions")
}

model Answer {
  // Unique id
  id Int @id @default(autoincrement())

  isCorrect   Boolean @default(false) @map("is_correct")
  isGenerated Boolean @default(false) @map("is_generated")

  // Custom text
  text String

  answersCountRandom Boolean? @map("answers_count_random")
  answersCountMin    Int?     @map("answers_count_min")
  answersCountMax    Int?     @map("answers_count_max")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  questionId Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
  @@map("answers")
}

// Relations

model UserTopic {
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  topicId Int   @map("topic_id")
  topic   Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  favorite Boolean @default(false)
  passed   Boolean @default(false)

  @@id([userId, topicId])
  @@map("user_topics")
}

model UserQuestion {
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  questionId Int      @map("question_id")
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  answered Boolean @default(false)
  repeat   Boolean @default(false)

  @@id([userId, questionId])
  @@map("user_questions")
}
