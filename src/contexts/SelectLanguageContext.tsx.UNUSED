'use client';

import React from 'react';

import { TSelectLanguageData } from '@/lib/types/language';

const SelectLanguageContext = React.createContext<TSelectLanguageData | undefined>(undefined);

interface SelectLanguageContextProviderProps {
  children: React.ReactNode;
  initialLangCode?: TSelectLanguageData['langCode'];
  initialLangName?: TSelectLanguageData['langName'];
  initialLangCustom?: TSelectLanguageData['langCustom'];
}

export function SelectLanguageContextProvider({
  children,
  initialLangCode,
  initialLangName,
  initialLangCustom,
}: SelectLanguageContextProviderProps) {
  const [langCode, setLangCode] = React.useState<TSelectLanguageData['langCode']>(initialLangCode);
  const [langName, setLangName] = React.useState<TSelectLanguageData['langName']>(initialLangName);
  const [langCustom, setLangCustom] =
    React.useState<TSelectLanguageData['langCustom']>(initialLangCustom);

  const value = React.useMemo(
    () => ({
      langCode,
      setLangCode,
      langName,
      setLangName,
      langCustom,
      setLangCustom,
    }),
    [langCode, setLangCode, langName, setLangName, langCustom, setLangCustom],
  );

  return <SelectLanguageContext.Provider value={value}>{children}</SelectLanguageContext.Provider>;
}

export function useSelectLanguageContext() {
  const context = React.useContext(SelectLanguageContext);
  if (!context) {
    throw new Error('useSelectLanguageContext must be used within SelectLanguageContextProvider');
  }
  return context;
}
