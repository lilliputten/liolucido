@use 'sass:color';
@use 'utils' as *;
@use 'variables' as *;

@tailwind base;
@tailwind components;
@tailwind utilities;

/*
 * NOTE: On modern tailwind configuration most of colors come are in the HSL color model.
 *
 * @see:
 *
 * - https://www.w3schools.com/colors/colors_hsl.asp
 * - https://htmlcolors.com/hex-to-hsl
 *
 * RGB colors:
 *
 * - https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/rgb
 *
 * See also:
 *
 * - https://medium.com/@oodri/tailwind-dynamic-color-theme-solution-4351d0495c7f
 */

@theme {
  --color-mint-500: oklch(0.72 0.11 178);
  // --font-display: "Satoshi", "sans-serif";
  // --breakpoint-3xl: 120rem;
  --color-avocado-100: oklch(0.99 0 0);
}

@layer base {
  :root {
    // NOTE: See also (duplicating) definitions in: `config/themeColors.ts`

    // Core colors

    --primaryColor: #{$primaryColor};
    --primaryColorRGB: #{rgbComponents($primaryColor)};
    --primaryForegroundColor: #{$primaryForegroundColor};
    --primaryForegroundColorRGB: #{rgbComponents($primaryForegroundColor)};

    --secondaryColor: #{$secondaryColor};
    --secondaryColorRGB: #{rgbComponents($secondaryColor)};
    --secondaryForegroundColor: #{$secondaryForegroundColor};
    --secondaryForegroundColorRGB: #{rgbComponents($secondaryForegroundColor)};

    --appDestructiveColor: #{$appDestructiveColor};
    --appDestructiveColorRGB: #{rgbComponents($appDestructiveColor)};
    --appDestructiveForegroundColor: #{$appDestructiveForegroundColor};
    --appDestructiveForegroundColorRGB: #{rgbComponents($appDestructiveForegroundColor)};

    --appSuccessColor: #{$appSuccessColor};
    --appSuccessColorRGB: #{rgbComponents($appSuccessColor)};
    --appSuccessForegroundColor: #{$appSuccessForegroundColor};
    --appSuccessForegroundColorRGB: #{rgbComponents($appSuccessForegroundColor)};

    // Dimensions

    --borderRadiusSize: 0.5rem;

    // Chart colors

    /* // XXX: Original chart colors
     * --chart1ColorHSL: 43 100% 50%; // 271.5 81.3% 55.9%;
     * --chart2ColorHSL: 43 100% 60%; // 270 95% 75%;
     * --chart3ColorHSL: 43 100% 70%; // 270 91% 65%;
     * --chart4ColorHSL: 43 100% 80%; // 269 97% 85%;
     * --chart5ColorHSL: 43 100% 90%; // 269 100% 92%;
     */

    --chart1Color: #{$chart1Color};
    --chart1ColorRGB: #{rgbComponents($chart1Color)};
    --chart2Color: #{$chart2Color};
    --chart2ColorRGB: #{rgbComponents($chart2Color)};
    --chart3Color: #{$chart3Color};
    --chart3ColorRGB: #{rgbComponents($chart3Color)};
    --chart4Color: #{$chart4Color};
    --chart4ColorRGB: #{rgbComponents($chart4Color)};
    --chart5Color: #{$chart5Color};
    --chart5ColorRGB: #{rgbComponents($chart5Color)};

    // Adaptive layouts

    --smallTreshold: #{$smallTreshold};
    --mobileTreshold: #{$mobileTreshold};
    --wideTreshold: #{$wideTreshold};

    // Delays

    --transitionTimeMs: #{$transitionTimeMs};
    --animationTimeMs: #{$animationTimeMs};
    --disappearTimeMs: #{$disappearTimeMs};

    // Themed light colors

    --backgroundLightColor: #{$backgroundLightColor};
    --backgroundLightColorRGB: #{rgbComponents($backgroundLightColor)};
    --foregroundLightColor: #{$foregroundLightColor};
    --foregroundLightColorRGB: #{rgbComponents($foregroundLightColor)};

    --backgroundDarkColor: #{$backgroundDarkColor};
    --backgroundDarkColorRGB: #{rgbComponents($backgroundDarkColor)};
    --foregroundDarkColor: #{$foregroundDarkColor};
    --foregroundDarkColorRGB: #{rgbComponents($foregroundDarkColor)};

    --backgroundColor: #{$backgroundLightColor};
    --backgroundColorRGB: #{rgbComponents($backgroundLightColor)};
    --foregroundColor: #{$foregroundLightColor};
    --foregroundColorRGB: #{rgbComponents($foregroundLightColor)};
    --cardColor: #{$cardLightColor};
    --cardColorRGB: #{rgbComponents($cardLightColor)};
    --cardForegroundColor: #{$cardForegroundLightColor};
    --cardForegroundColorRGB: #{rgbComponents($cardForegroundLightColor)};
    --popoverColor: #{$popoverLightColor};
    --popoverColorRGB: #{rgbComponents($popoverLightColor)};
    --popoverForegroundColor: #{$popoverForegroundLightColor};
    --popoverForegroundColorRGB: #{rgbComponents($popoverForegroundLightColor)};
    --mutedColor: #{$mutedLightColor};
    --mutedColorRGB: #{rgbComponents($mutedLightColor)};
    --mutedForegroundColor: #{$mutedForegroundLightColor};
    --mutedForegroundColorRGB: #{rgbComponents($mutedForegroundLightColor)};
    --accentColor: #{$accentLightColor};
    --accentColorRGB: #{rgbComponents($accentLightColor)};
    --accentForegroundColor: #{$accentForegroundLightColor};
    --accentForegroundColorRGB: #{rgbComponents($accentForegroundLightColor)};
    --destructiveColor: #{$destructiveLightColor};
    --destructiveColorRGB: #{rgbComponents($destructiveLightColor)};
    --destructiveForegroundColor: #{$destructiveForegroundLightColor};
    --destructiveForegroundColorRGB: #{rgbComponents($destructiveForegroundLightColor)};
    --errorColor: #{$errorLightColor};
    --errorColorRGB: #{rgbComponents($errorLightColor)};
    --borderColor: #{$borderLightColor};
    --borderColorRGB: #{rgbComponents($borderLightColor)};
    --inputColor: #{$inputLightColor};
    --inputColorRGB: #{rgbComponents($inputLightColor)};
    --ringColor: #{$ringLightColor};
    --ringColorRGB: #{rgbComponents($ringLightColor)};
  }

  .dark {
    // Themed dark colors

    --backgroundColor: #{$backgroundDarkColor};
    --backgroundColorRGB: #{rgbComponents($backgroundDarkColor)};
    --foregroundColor: #{$foregroundDarkColor};
    --foregroundColorRGB: #{rgbComponents($foregroundDarkColor)};
    --cardColor: #{$cardDarkColor};
    --cardColorRGB: #{rgbComponents($cardDarkColor)};
    --cardForegroundColor: #{$cardForegroundDarkColor};
    --cardForegroundColorRGB: #{rgbComponents($cardForegroundDarkColor)};
    --popoverColor: #{$popoverDarkColor};
    --popoverColorRGB: #{rgbComponents($popoverDarkColor)};
    --popoverForegroundColor: #{$popoverForegroundDarkColor};
    --popoverForegroundColorRGB: #{rgbComponents($popoverForegroundDarkColor)};
    --mutedColor: #{$mutedDarkColor};
    --mutedColorRGB: #{rgbComponents($mutedDarkColor)};
    --mutedForegroundColor: #{$mutedForegroundDarkColor};
    --mutedForegroundColorRGB: #{rgbComponents($mutedForegroundDarkColor)};
    --accentColor: #{$accentDarkColor};
    --accentColorRGB: #{rgbComponents($accentDarkColor)};
    --accentForegroundColor: #{$accentForegroundDarkColor};
    --accentForegroundColorRGB: #{rgbComponents($accentForegroundDarkColor)};
    --destructiveColor: #{$destructiveDarkColor};
    --destructiveColorRGB: #{rgbComponents($destructiveDarkColor)};
    --destructiveForegroundColor: #{$destructiveForegroundDarkColor};
    --destructiveForegroundColorRGB: #{rgbComponents($destructiveForegroundDarkColor)};
    --errorColor: #{$errorDarkColor};
    --errorColorRGB: #{rgbComponents($errorDarkColor)};
    --borderColor: #{$borderDarkColor};
    --borderColorRGB: #{rgbComponents($borderDarkColor)};
    --inputColor: #{$inputDarkColor};
    --inputColorRGB: #{rgbComponents($inputDarkColor)};
    --ringColor: #{$ringDarkColor};
    --ringColorRGB: #{rgbComponents($ringDarkColor)};
  }

  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground;
    font-feature-settings:
      'rlig' 1,
      'calt' 1;
  }

  code,
  pre {
    font-size: 0.75rem;
  }

  .MarkdownText {
    code {
      font-size: 0.75rem;
      background-color: rgba(var(--color-theme-400-RGB) / 5%);
      border: 1px solid rgba(var(--color-theme-400-RGB) / 5%);
      font-weight: normal;
      &:before,
      &:after {
        display: none;
      }
    }
    pre {
      background-color: transparent !important;
      border: none;
      padding: 0 !important;
    }
    pre > code,
    .SyntaxHighlighter > code {
      padding: 0;
    }
    // stylelint-disable-next-line no-descending-specificity
    pre > code,
    pre > .SyntaxHighlighter {
      border-radius: 0.5em;
      // background-color: none !important;
      // background-color: rgba(var(--color-theme-400-RGB) / 5%) !important;
      background-color: rgba(var(--backgroundColorRGB) / 40%) !important;
      border: 1px solid rgba(var(--color-theme-400-RGB) / 5%);
    }
    pre > .SyntaxHighlighter > code {
      background-color: transparent !important;
      border: none;
    }
  }
}

@layer utilities {
  .step {
    counter-increment: step;
  }

  .step:before {
    @apply absolute inline-flex h-9 w-9 items-center justify-center rounded-full border-4 border-background bg-muted text-center -indent-px font-mono text-base font-medium;
    @apply ml-[-50px] mt-[-4px];
    content: counter(step);
  }

  .error-gradient-background {
    background: repeating-linear-gradient(
      -30deg,
      rgba(var(--destructiveColorRGB) / 100%) 0px,
      rgba(var(--destructiveColorRGB) / 100%) 6px,
      rgba(var(--destructiveColorRGB) / 90%) 6px,
      rgba(var(--destructiveColorRGB) / 90%) 12px
    );
  }

  .bg-page-gradient {
    // background: radial-gradient(
    //   50% 100% at 50% 0%,
    //   rgb(90, 93, 255) 25%,
    //   rgb(10, 132, 255) 100%
    // );
    // background: radial-gradient(
    //   80% 100% at 80% 0%,
    //   rgba(var(--color-purple-600-RGB) / 10%) 50%,
    //   rgba(var(--color-theme-500-RGB) / 20%) 100%
    // );
    background: radial-gradient(
      70% 60% at 40% 60%,
      rgba(var(--color-theme-500-RGB) / 15%) 0%,
      rgba(var(--color-blue-400-RGB) / 15%) 100%
    );
    &:before {
      overflow: hidden;
      position: absolute;
      left: -75%;
      right: -75%;
      top: -75%;
      bottom: -75%;
      content: '';
      transform: rotate(-30deg);
      background: radial-gradient(
        50% 20% at 70% 50%,
        rgba(var(--color-blue-600-RGB) / 15%) 0%,
        rgba(var(--color-blue-500-RGB) / 2%) 100%
      );
    }
  }

  .bg-decorative-gradient {
    background: radial-gradient(
      70% 60% at 40% 60%,
      rgba(var(--color-theme-600-RGB) / 10%) 0%,
      rgba(var(--color-theme-600-RGB) / 4%) 100% // rgba(var(--color-theme-500-RGB) / 25%) 0%,
       // rgba(var(--color-theme-500-RGB) / 10%) 100%
    );
    &:before {
      overflow: hidden;
      position: absolute;
      left: -75%;
      right: -75%;
      top: -75%;
      bottom: -75%;
      content: '';
      transform: rotate(-30deg);
      background: radial-gradient(
        50% 20% at 70% 50%,
        // rgba(var(--color-purple-400-RGB) / 20%) 0%,
        // rgba(var(--color-purple-300-RGB) / 2%) 100%
        rgba(var(--color-purple-600-RGB) / 6%) 0%,
        rgba(var(--color-purple-500-RGB) / 3%) 100%
      );
    }
  }

  .decorative-card {
    // --tw-ring-shadow: inset 0 0 3em rgba(var(--color-theme-500-RGB) / 30%);
    --tw-ring-shadow: inset 0 0 2em rgba(var(--backgroundColorRGB) / 50%);
    // background: linear-gradient(300deg, rgba(var(--color-theme-500-RGB) / 30%), transparent 70%),
    /*
     * linear-gradient(217deg, rgba(255 0 0 / 10%), transparent 70%),
     *   linear-gradient(127deg, rgba(var(--color-theme-500-RGB) / 10%), transparent 70%),
     *   linear-gradient(90deg, rgba(0 0 255 / 10%), transparent 70%);
     */
  }

  .text-gradient-brand {
    background: linear-gradient(
      15deg,
      rgba(var(--primaryColorRGB) / 80%) 0%,
      rgb(var(--color-theme-500-RGB)) 100%
    );
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .bg-header-gradient {
    // background: radial-gradient(
    //   50% 100% at 50% 0%,
    //   rgb(90, 93, 255) 25%,
    //   rgb(10, 132, 255) 100%
    // );
    // background: radial-gradient(
    //   70% 60% at 40% 60%,
    //   rgba(var(--color-theme-600-RGB) / 15%) 0%,
    //   rgba(var(--color-theme-600-RGB) / 5%) 100%
    // );
    background: radial-gradient(
      80% 100% at 80% 0%,
      rgba(var(--color-purple-600-RGB) / 30%) 50%,
      rgba(var(--color-purple-500-RGB) / 20%) 100%
    );
    &:before {
      overflow: hidden;
      position: absolute;
      left: -75%;
      right: -75%;
      top: -75%;
      bottom: -75%;
      content: '';
      // transform: rotate(-8deg);
      background: radial-gradient(
        // 15deg,
        40% 80% at 35% 35%,
        rgba(var(--color-purple-600-RGB) / 60%) 0%,
        rgba(var(--color-purple-500-RGB) / 0%) 100%
      );
    }
  }

  .disabled {
    pointer-events: none;
    opacity: 50%;
    cursor: default;
  }

  .text-content {
    h1,
    h2,
    h3,
    h4,
    h5,
    h6,
    p,
    ul,
    ol {
      margin-top: 0.25em;
      margin-bottom: 0.25em;
    }
    h1,
    h2,
    h3 {
      color: rgb(var(--color-theme-500-RGB));
    }
    h1 {
      font-size: 2rem;
    }
    h2 {
      font-size: 1.75rem;
    }
    h3 {
      font-size: 1.5rem;
    }
    a {
      color: rgb(var(--color-theme-400-RGB));
      &:hover {
        text-decoration: underline;
        color: rgb(var(--color-theme-300-RGB));
      }
    }
  }

  .truncate-start {
    direction: rtl;
    text-align: right;
    unicode-bidi: bidi-override;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
  }

  // Define themes (from global variables `$themes` and `$defaultTheme`, see definitions in the `src/config/themeColors.ts`)
  @include defineAllThemes($themes, $defaultTheme);
  // Define all theme colors to use in scss
  @include defineAllColors($themes, $defaultTheme);
}
